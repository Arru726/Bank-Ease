#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_CUSTOMERS 100
#define MAX_NAME_LENGTH 50
#define MAX_PASSWORD_LENGTH 20
#define MAX_TRANSACTIONS 100

typedef struct {
    int account_number;
    char transaction_type[20];
    double amount;
    double balance_after;
} Transaction;

typedef struct {
    int account_number;
    char name[MAX_NAME_LENGTH];
    char password[MAX_PASSWORD_LENGTH];
    double balance;
} Customer;

Customer customers[MAX_CUSTOMERS];
Transaction transactions[MAX_TRANSACTIONS];
int customer_count = 0;
int transaction_count = 0;

void create_account();
void perform_transaction();
void generate_statement();
void login();
void deposit(int account_number, double amount);
void withdraw(int account_number, double amount);
void transfer(int from_account, int to_account, double amount);
void view_transaction_history();
int find_account(int account_number);
void clear_input_buffer();
void record_transaction(int account_number, const char *type, double amount, double balance_after);

int main() {
    int choice;

    while (1) {
        printf("\n--- Bank Management System ---\n");
        printf("1. Create Account\n");
        printf("2. Login\n");
        printf("3. Perform Transaction (Deposit/Withdraw/Transfer)\n");
        printf("4. Generate Statement\n");
        printf("5. View Transaction History\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clear_input_buffer();

        switch (choice) {
            case 1:
                create_account();
                break;
            case 2:
                login();
                break;
            case 3:
                perform_transaction();
                break;
            case 4:
                generate_statement();
                break;
            case 5:
                view_transaction_history();
                break;
            case 6:
                printf("Exiting the program. Goodbye!\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void clear_input_buffer() {
    while (getchar() != '\n');
}

void create_account() {
    if (customer_count >= MAX_CUSTOMERS) {
        printf("Customer database is full. Cannot create more accounts.\n");
        return;
    }

    Customer new_customer;
    printf("Enter account number: ");
    scanf("%d", &new_customer.account_number);
    clear_input_buffer();

    if (find_account(new_customer.account_number) != -1) {
        printf("Account number already exists. Try again.\n");
        return;
    }

    printf("Enter customer name: ");
    fgets(new_customer.name, MAX_NAME_LENGTH, stdin);
    new_customer.name[strcspn(new_customer.name, "\n")] = '\0';

    printf("Enter initial deposit amount: ");
    scanf("%lf", &new_customer.balance);
    clear_input_buffer();

    if (new_customer.balance < 0) {
        printf("Initial deposit must be non-negative.\n");
        return;
    }

    printf("Enter password: ");
    fgets(new_customer.password, MAX_PASSWORD_LENGTH, stdin);
    new_customer.password[strcspn(new_customer.password, "\n")] = '\0';

    customers[customer_count++] = new_customer;
    record_transaction(new_customer.account_number, "Initial Deposit", new_customer.balance, new_customer.balance);
    printf("Account created successfully!\n");
}

void login() {
    int account_number;
    char password[MAX_PASSWORD_LENGTH];

    printf("Enter account number: ");
    scanf("%d", &account_number);
    clear_input_buffer();

    int index = find_account(account_number);
    if (index == -1) {
        printf("Account not found.\n");
        return;
    }

    printf("Enter password: ");
    fgets(password, MAX_PASSWORD_LENGTH, stdin);
    password[strcspn(password, "\n")] = '\0';

    if (strcmp(customers[index].password, password) == 0) {
        printf("Login successful!\n");
    } else {
        printf("Incorrect password.\n");
    }
}

void perform_transaction() {
    int choice, account_number, target_account;
    double amount;

    printf("\n--- Transaction Menu ---\n");
    printf("1. Deposit\n");
    printf("2. Withdraw\n");
    printf("3. Transfer\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);
    clear_input_buffer();

    switch (choice) {
        case 1:
            printf("Enter account number: ");
            scanf("%d", &account_number);
            printf("Enter amount to deposit: ");
            scanf("%lf", &amount);
            clear_input_buffer();
            deposit(account_number, amount);
            break;

        case 2:
            printf("Enter account number: ");
            scanf("%d", &account_number);
            printf("Enter amount to withdraw: ");
            scanf("%lf", &amount);
            clear_input_buffer();
            withdraw(account_number, amount);
            break;

        case 3:
            printf("Enter source account number: ");
            scanf("%d", &account_number);
            printf("Enter target account number: ");
            scanf("%d", &target_account);
            printf("Enter amount to transfer: ");
            scanf("%lf", &amount);
            clear_input_buffer();
            transfer(account_number, target_account, amount);
            break;

        default:
            printf("Invalid transaction type.\n");
    }
}

void generate_statement() {
    int account_number;
    printf("Enter account number: ");
    scanf("%d", &account_number);
    clear_input_buffer();

    int index = find_account(account_number);
    if (index == -1) {
        printf("Account not found.\n");
        return;
    }

    Customer *customer = &customers[index];
    printf("\n--- Account Statement ---\n");
    printf("Account Number: %d\n", customer->account_number);
    printf("Customer Name: %s\n", customer->name);
    printf("Balance: %.2lf\n", customer->balance);
}

void deposit(int account_number, double amount) {
    int index = find_account(account_number);
    if (index == -1) {
        printf("Account not found.\n");
        return;
    }

    customers[index].balance += amount;
    record_transaction(account_number, "Deposit", amount, customers[index].balance);
    printf("Amount deposited successfully. New balance: %.2lf\n", customers[index].balance);
}

void withdraw(int account_number, double amount) {
    int index = find_account(account_number);
    if (index == -1) {
        printf("Account not found.\n");
        return;
    }

    if (customers[index].balance < amount) {
        printf("Insufficient balance.\n");
        return;
    }

    customers[index].balance -= amount;
    record_transaction(account_number, "Withdraw", amount, customers[index].balance);
    printf("Amount withdrawn successfully. New balance: %.2lf\n", customers[index].balance);
}

void transfer(int from_account, int to_account, double amount) {
    int from_index = find_account(from_account);
    int to_index = find_account(to_account);

    if (from_index == -1 || to_index == -1) {
        printf("One or both accounts not found.\n");
        return;
    }

    if (customers[from_index].balance < amount) {
        printf("Insufficient balance in source account.\n");
        return;
    }

    customers[from_index].balance -= amount;
    customers[to_index].balance += amount;
    record_transaction(from_account, "Transfer Out", amount, customers[from_index].balance);
    record_transaction(to_account, "Transfer In", amount, customers[to_index].balance);
    printf("Amount transferred successfully.\n");
}

int find_account(int account_number) {
    for (int i = 0; i < customer_count; i++) {
        if (customers[i].account_number == account_number) {
            return i;
        }
    }
    return -1;
}

void record_transaction(int account_number, const char *type, double amount, double balance_after) {
    if (transaction_count >= MAX_TRANSACTIONS) {
        printf("Transaction history is full.\n");
        return;
    }

    Transaction new_transaction;
    new_transaction.account_number = account_number;
    strcpy(new_transaction.transaction_type, type);
    new_transaction.amount = amount;
    new_transaction.balance_after = balance_after;

    transactions[transaction_count++] = new_transaction;
}

void view_transaction_history() {
    int account_number;
    printf("Enter account number: ");
    scanf("%d", &account_number);
    clear_input_buffer();

    printf("\n--- Transaction History ---\n");
    int found = 0;

    for (int i = 0; i < transaction_count; i++) {
        if (transactions[i].account_number == account_number) {
            printf("%s: %.2lf (Balance: %.2lf)\n",
                   transactions[i].transaction_type,
                   transactions[i].amount,
                   transactions[i].balance_after);
            found = 1;
        }
    }

    if (!found) {
        printf("No transactions found for this account.\n");
    }
}
